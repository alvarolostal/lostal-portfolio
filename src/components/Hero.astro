<section id="hero" class="hero">
  <div class="hero-content">
    <div
      class="hero-image-wrapper"
      tabindex="0"
      role="button"
      aria-label="Ver informaci√≥n personal de √Ålvaro Lostal"
    >
      <img
        src="/assets/alvaro-320.webp"
        srcset="/assets/alvaro-320.webp 320w, 
                /assets/alvaro-480.webp 480w"
        sizes="(max-width: 768px) 200px, 
               174px"
        alt="√Ålvaro Lostal, Desarrollador Frontend"
        class="hero-image interactive-image"
        id="heroImage"
        loading="eager"
        fetchpriority="high"
      />
      <div class="profile-indicator" aria-hidden="true">
        <span class="profile-indicator__text">Sobre m√≠</span>
        <i class="profile-indicator__icon">‚ìò</i>
      </div>
    </div>
    <div class="hero-subtitle">Hola, soy</div>
    <h1 class="hero-title">√Ålvaro Lostal</h1>
    <p class="hero-description">
      Ingeniero Inform√°tico especializado en Desarrollo Web Frontend.
      <br />Me inspiran el dise√±o y la simplicidad.
    </p>
    <div class="hero-cta">
      <a href="#contact" class="btn btn-primary">
        <i class="fas fa-arrow-right"></i> Contactar
      </a>
      <a href="#projects" class="btn btn-secondary">Ver portfolio</a>
    </div>
  </div>

  <!-- Card flotante con informaci√≥n personal -->
  <div class="about-card" id="aboutCard" aria-hidden="true">
    <button
      class="about-card__close"
      id="closeCard"
      aria-label="Cerrar informaci√≥n"
    >
      <i class="fas fa-times"></i>
    </button>
    <div class="about-card__content">
      <h3 class="about-card__title">Sobre m√≠</h3>
      <p class="about-card__text">
        Soy √Ålvaro Lostal, ingeniero inform√°tico (21) de Santander, Espa√±a. Me
        dedico al desarrollo frontend y al dise√±o de interfaces elegantes,
        minimalistas y funcionales; estudio el √∫ltimo a√±o del grado en la
        Universidad Europea del Atl√°ntico.
      </p>
      <div class="about-card__stats">
        <div class="stat">
          <span class="stat-number">2026</span>
          <span class="stat-label">Graduaci√≥n</span>
        </div>
        <div class="stat">
          <span class="stat-number">B2</span>
          <span class="stat-label">Ingl√©s</span>
        </div>
        <div class="stat">
          <span class="stat-number">4 a√±os</span>
          <span class="stat-label">Autodidacta</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Overlay para m√≥vil -->
  <div class="about-card-overlay" id="cardOverlay" aria-hidden="true"></div>

  <a
    href="#projects"
    class="scroll-down"
    id="scrollDown"
    aria-label="Ir a proyectos"
  >
    <i class="fas fa-angle-down"></i>
  </a>
</section>

<script>
  // Hero Card Manager - Funcionalidad interactiva del card flotante
  // @ts-nocheck
  class HeroCardManager {
    constructor() {
      this.heroImage = document.getElementById('heroImage');
      this.heroImageWrapper = document.querySelector('.hero-image-wrapper');
      this.aboutCard = document.getElementById('aboutCard');
      this.closeButton = document.getElementById('closeCard');
      this.overlay = document.getElementById('cardOverlay');
      this.profileIndicator = document.querySelector('.profile-indicator');
      this.isCardOpen = false;
      this.isMobile = window.innerWidth <= 768;
      this.cachedHeaderHeight = null; // Cache para evitar reflows

      this.init();
    }

    init() {
      if (!this.heroImage || !this.aboutCard) return;

      this.bindEvents();
      this.handleResize();

      // Configurar posicionamiento inicial
      window.addEventListener('load', () => {
        this.calculateCardPosition();
      });
    }

    bindEvents() {
      // Limpiar eventos existentes
      this.removeAllEvents();

      // Desktop: hover events
      if (!this.isMobile) {
        this.showCardBound = () => this.showCard();
        this.hideCardBound = () => this.hideCard();

        // Usar el wrapper para un √°rea m√°s grande de interacci√≥n
        this.heroImageWrapper.addEventListener(
          'mouseenter',
          this.showCardBound
        );
        this.heroImageWrapper.addEventListener(
          'mouseleave',
          this.hideCardBound
        );
        this.aboutCard.addEventListener('mouseenter', this.showCardBound);
        this.aboutCard.addEventListener('mouseleave', this.hideCardBound);
      } else {
        // Mobile: touch events en el wrapper para mayor √°rea t√°ctil
        this.toggleCardBound = e => {
          e.preventDefault();
          this.toggleCard();
        };

        this.heroImageWrapper.addEventListener('click', this.toggleCardBound);
      }

      // Eventos que no cambian con el tipo de dispositivo
      this.bindStaticEvents();

      // Redimensionar ventana
      window.addEventListener('resize', () => this.handleResize());
    }

    bindStaticEvents() {
      // Cerrar card
      this.closeButton?.addEventListener('click', () => this.hideCard());
      this.overlay?.addEventListener('click', () => this.hideCard());

      // Teclado - usar el wrapper para mayor √°rea de interacci√≥n
      this.heroImageWrapper.addEventListener('keydown', e => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.toggleCard();
        }
      });

      document.addEventListener('keydown', e => {
        if (e.key === 'Escape' && this.isCardOpen) {
          this.hideCard();
        }
      });
    }

    removeAllEvents() {
      if (this.showCardBound) {
        this.heroImageWrapper.removeEventListener(
          'mouseenter',
          this.showCardBound
        );
        this.aboutCard.removeEventListener('mouseenter', this.showCardBound);
      }
      if (this.hideCardBound) {
        this.heroImageWrapper.removeEventListener(
          'mouseleave',
          this.hideCardBound
        );
        this.aboutCard.removeEventListener('mouseleave', this.hideCardBound);
      }
      if (this.toggleCardBound) {
        this.heroImageWrapper.removeEventListener(
          'click',
          this.toggleCardBound
        );
      }
    }

    handleResize() {
      const wasMobile = this.isMobile;
      this.isMobile = window.innerWidth <= 768;

      if (wasMobile !== this.isMobile) {
        this.hideCard(true); // Force hide without animation
        this.bindEvents(); // Re-bind events for new device type
        console.log(
          `üì± Cambio de dispositivo: ${this.isMobile ? 'm√≥vil' : 'desktop'}`
        );
      }

      if (this.isCardOpen) {
        // En m√≥vil, recalcular con delay para asegurar dimensiones correctas
        if (this.isMobile) {
          setTimeout(() => {
            this.calculateCardPosition();
          }, 100);
        } else {
          this.calculateCardPosition();
        }
      }
    }

    calculateCardPosition() {
      if (!this.heroImage || !this.aboutCard) return;

      // Usar requestAnimationFrame para agrupar lecturas de DOM
      requestAnimationFrame(() => {
        // Batch DOM reads to prevent multiple reflows
        const imageRect = this.heroImage.getBoundingClientRect();
        const viewport = {
          width: window.innerWidth,
          height: window.innerHeight,
        };

        // Cache header height to avoid repeated DOM queries
        if (!this.cachedHeaderHeight) {
          const header =
            document.querySelector('nav') || document.querySelector('header');
          this.cachedHeaderHeight = header ? header.offsetHeight : 80;
        }
        const minTopMargin = this.cachedHeaderHeight + 20;

        let cardX, cardY;

        if (this.isMobile || viewport.width <= 768) {
          // En m√≥vil: centrado perfecto con dimensiones cacheadas
          const cardWidth = 360; // Usar dimensi√≥n fija para evitar reflows
          const cardHeight = 400;

          // Centrar horizontalmente con m√°rgenes seguros
          const margins = 20;
          const availableWidth = viewport.width - margins * 2;
          const finalWidth = Math.min(cardWidth, availableWidth);

          cardX = (viewport.width - finalWidth) / 2;

          // Centrar verticalmente considerando el header
          const availableHeight = viewport.height - minTopMargin - margins;
          const finalHeight = Math.min(cardHeight, availableHeight);

          cardY = minTopMargin + (availableHeight - finalHeight) / 2;
        } else {
          // En desktop, posicionar a la derecha de la imagen
          const cardWidth = 400; // Usar dimensi√≥n fija
          const desiredX = imageRect.right + 40;
          const maxX = viewport.width - cardWidth - 30;

          cardX = Math.min(desiredX, maxX);

          // Calcular Y para que no toque el header
          const desiredY = imageRect.top;
          cardY = Math.max(minTopMargin, desiredY);

          // Asegurar que no se salga por abajo
          const maxY = viewport.height - 400 - 30; // Usar altura fija
          cardY = Math.min(cardY, maxY);
        }

        // Batch DOM writes
        requestAnimationFrame(() => {
          this.aboutCard.style.left = `${Math.round(cardX)}px`;
          this.aboutCard.style.top = `${Math.round(cardY)}px`;
        });
      });
    }

    showCard() {
      if (this.isCardOpen) return;

      this.isCardOpen = true;

      // Calcular posici√≥n inicial
      this.calculateCardPosition();

      // Ocultar indicador visual
      if (this.profileIndicator) {
        this.profileIndicator.classList.add('hidden');
      }

      // A√±adir clases para animaci√≥n
      this.aboutCard.classList.add('show');
      this.aboutCard.setAttribute('aria-hidden', 'false');

      if (this.isMobile) {
        this.overlay.classList.add('show');
        this.overlay.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';

        // Recalcular posici√≥n despu√©s del render para m√≥vil (m√°s preciso)
        requestAnimationFrame(() => {
          setTimeout(() => {
            this.calculateCardPosition();
            console.log('üì± Posici√≥n recalculada para m√≥vil');
          }, 50);
        });
      }

      // Focus management para accesibilidad
      setTimeout(() => {
        if (this.isMobile) {
          this.closeButton?.focus();
        }
      }, 300);
    }

    hideCard(force = false) {
      if (!this.isCardOpen && !force) return;

      this.isCardOpen = false;

      // Mostrar indicador visual nuevamente
      if (this.profileIndicator) {
        this.profileIndicator.classList.remove('hidden');
      }

      // Remover clases para animaci√≥n
      this.aboutCard.classList.remove('show');
      this.aboutCard.setAttribute('aria-hidden', 'true');

      if (this.isMobile) {
        this.overlay.classList.remove('show');
        this.overlay.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
      }
    }

    toggleCard() {
      if (this.isCardOpen) {
        this.hideCard();
      } else {
        this.showCard();
      }
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    new HeroCardManager();
  });
</script>
